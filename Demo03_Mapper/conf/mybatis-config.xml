<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!--在配置文件中,标签顺序如下: properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, objectWrapperFactory?,
	reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?-->
	<!--
		1、mybatis可以使用properties来引入外部properties配置文件的内容；
		resource：引入类路径下的资源
		url(代替resource)：引入网络路径或者磁盘路径下的资源
		MyBatis解析时用的是 ${键名}
	  -->
	<properties resource="dbconfig.properties"></properties>

	<!--
		2、settings包含很多重要的设置项(即可以添加多个setting)
		setting:用来设置每一个设置项
			name：设置项名
			value：设置项取值
		mapUnderscoreToCamelCase:作用将下划线匹配驼峰命名规则(大小写不太清楚,下划线一定可以匹配成功)
	 -->
	<settings>
		<!--注释掉驼峰匹配,用于验证自定义resultMap-->
		<!--<setting name="mapUnderscoreToCamelCase" value="true"/>-->
		<setting name="jdbcTypeForNull" value="NULL"/>

		<!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  -->
		<setting name="lazyLoadingEnabled" value="true"/>
		<setting name="aggressiveLazyLoading" value="false"/>
	</settings>

	<!-- 3、typeAliases：别名处理器：可以为我们的java类型起别名
			别名不区分大小写(在resultType中写成大写也可以)
	-->
	<typeAliases>
		<!-- 1、typeAlias:为某个java类型起别名
				type:指定要起别名的类型全类名;默认别名就是类名小写；employee
				alias:指定新的别名
		 -->
		<!--<typeAlias type="com.atguigu.mybatis.bean.Employee" alias="ploy"/>-->

		<!-- 2、package:为某个包下的所有类批量起别名
				name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写））
		-->
		<package name="com.atguigu.mybatis.bean"/>
		<!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 -->
	</typeAliases>

	<!--
		4、environments：环境们，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。
			environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识
				transactionManager：事务管理器；
					type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
						自定义事务管理器：实现TransactionFactory接口.type指定为全类名

				dataSource：数据源;
					type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)
								|POOLED(PooledDataSourceFactory)
								|JNDI(JndiDataSourceFactory)
					自定义数据源：实现DataSourceFactory接口，type是全类名
		 -->
	<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>

	<!-- 5、databaseIdProvider：支持多数据库厂商的；
		 type="DB_VENDOR"：VendorDatabaseIdProvider
		 	作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
		 	MySQL，Oracle，SQL Server,xxxx
	  -->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的数据库厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider>


	<!-- 6、mappers：将sql映射注册到全局配置中 -->
	<!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->
	<mappers>
		<!--
			mapper:注册一个sql映射
				注册配置文件(配置文件也可以绑定接口)
				resource：引用类路径下的sql映射文件
					mybatis/mapper/EmployeeMapper.xml(是在conf下创建mybatis/mapper包,在这个包中存放xml文件,此时resource就用这个路径)
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml (这个还是在磁盘本地吧?只是用了file协议读取?)

				注册接口(接口也可以用到配置文件)
				class：引用（注册）接口，
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下(可以在conf和src下同时创建相同包,将xml和同名类
					分别放在两个包下.有条理,也能生效,因为在编译后的out文件,几个资源包都会合并到com包下)；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上(缺点是只能简单的sql语句,且没有databaseId等属性);
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件xml中
						不重要，简单的Dao接口为了开发快速可以使用注解；
		-->
		<!--<mapper resource="mybatis/mapper/EmployeeMapper.xml"/>-->
		<!--<mapper class="com.atguigu.mybatis.dao.EmployeeMapper"/>-->
		<!--<mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/>-->

		<!-- 批量注册：
		 1) 如果有配置文件且绑定了接口,就要放在同一个包下面(可以像class那样,在conf和src下创建同一个包.或者都放在conf或src下)
		 2) 只有接口+注解的方式,只需要添加注解接口所在包即可-->
		<package name="com.atguigu.mybatis.dao"/>
	</mappers>
</configuration>