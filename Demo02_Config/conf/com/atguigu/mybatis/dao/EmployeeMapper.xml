<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">
    <!--
        namespace:名称空间;指定为接口的全类名  (原本的namespace可以随便写:com.atguigu.mybatis.EmployeeMapper(就是随便写的))
        id：唯一标识; 改为绑定的方法的方法名
        resultType：返回值类型
        #{id}：从传递过来的参数中取出id值

        public Employee getEmpById(Integer id);
        此时,下面select标签是 接口下getEmpById方法的实现

     这里取别名,可以挽救 bean类属性与 表列名不同的 情况 select id,last_name lastName,email,gender from tbl_employee where id = #{id}
     使用mapUnderscoreToCamelCase可以将下划线匹配到驼峰命名规则 即 last_name -> lastName
     -->
    <!--每个select都是一个sql映射
    1. 通过id属性进行区别一个Mapper下的各个select映射
    2. databaseId属性,确定这个映射的数据库.属性值用的是config中databaseIdProvider取的别名
    3. id和databaseId共同确定是否被引用.databaseId应该是根据连接的数据库.而连接到数据库由environments决定-->
    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee">
		select * from tbl_employee where id = #{id}
	</select>
    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee"
            databaseId="mysql">
		select * from tbl_employee where id = #{id}
	</select>
    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee"
            databaseId="oracle">
		select EMPLOYEE_ID id,LAST_NAME	lastName,EMAIL email
		from employees where EMPLOYEE_ID=#{id}
	</select>
</mapper>

<!--对bean类取别名(EmP也可以使用.别名在 resultType中,各个字母大小写,都可以被识别)-->
<!--<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">
<select id="getEmpById" resultType="emp">
        select * from tbl_employee where id = #{id}
	</select>
</mapper>-->
